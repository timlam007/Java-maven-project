name: CI/CD Pipeline

on:
  push:
    branches:
      - PROD
      - QA

jobs:
  extract-branch-name:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{steps.branch_name.outputs.BRANCH_NAME}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract Branch Name
        id: branch_name
        run: |
          # Get the current branch reference (e.g., refs/heads/PROD)
          BRANCH_REF=$(git symbolic-ref --short HEAD)

          # Extract the branch name
          BRANCH_NAME=$(echo "$BRANCH_REF" | cut -d'/' -f3)

          # Set the branch name as an output variable
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT
  build:
    runs-on: ubuntu-latest
    environment: 
      name: ${{ needs.extract-branch-name.outputs.branch_name }}
    needs: [extract-branch-name]
    steps:
      - run: echo "ENV - ${{ needs.extract-branch-name.outputs.branch_name }}"
  #     - name: Check Ubuntu Virtual Environment Provided by GitHub Action
  #       run: |
  #         lsb_release -a
  #         ip addr
  #         free -m
  #         lscpu
  #         df -h
  #         pwd
  #         date
          
  #     - name: Checkout Repository
  #       uses: actions/checkout@v3

  #     - name: Set up Java
  #       uses: actions/setup-java@v2
  #       with:
  #         java-version: "11"
  #         distribution: "adopt"

  #     - name: Download SonarScanner
  #       run: |
  #         wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
  #         unzip sonar-scanner-cli-4.6.2.2472-linux.zip
  #         sudo mv sonar-scanner-4.6.2.2472-linux /opt/sonar-scanner

  #     - name: Build Maven Project
  #       run: mvn clean install

  #     - name: Run JUnit Tests
  #       run: mvn test

  #     - name: Run SonarQube Analysis
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
  #         SONAR_HOST_URL: ${{ secrets.SONARQUBE_URL }}
  #       run: |
  #         export PATH=$PATH:/opt/sonar-scanner/bin
  #         sonar-scanner -Dsonar.projectKey=timlam007_Java-maven-project -Dsonar.java.binaries=target/classes -Dsonar.organization=timlam007 -Dsonar.sources=src -Dsonar.host.url=${{ secrets.SONARQUBE_URL }} -Dsonar.login=${{ secrets.SONARQUBE_TOKEN }}

  # build-container:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   environment: 
  #     name: ${{ needs.extract-branch-name.outputs.branch_name }}
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v3

  #     - name: Install Podman
  #       run: |
  #         . /etc/os-release
  #         echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/ /" | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
  #         curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/Release.key | sudo apt-key add -
  #         sudo apt-get update
  #         sudo apt-get -y install podman

  #     - name: Login to Red Hat Registry
  #       run: |
  #         echo "Red Hat Registry Username: ${{ secrets.RH_REGISTRY_USERNAME }}"
  #         echo "Red Hat Registry Password: ${{ secrets.RH_REGISTRY_PASSWORD }}"
  #         podman login -u tinlam -p d545743D@007 registry.redhat.io
  #         podman login -u ${{ secrets.RH_REGISTRY_USERNAME }} -p ${{ secrets.RH_REGISTRY_PASSWORD }} quay.io

  #     - name: Build Podman Image
  #       run: podman build -t quay.io/tinlam/test/java-app:latest .

  #     - name: Push Podman Image
  #       run: podman push quay.io/tinlam/test/java-app:latest

  # scan-security-vulnerabilities:
  #   runs-on: ubuntu-latest
  #   needs: build-container
  #   environment: 
  #     name: ${{ needs.extract-branch-name.outputs.branch_name }}
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v3
        
  #     - name: Echo masked SNYK_TOKEN
  #       run: echo "***${{ secrets.SNYK_TOKEN }}***"
        
  #     - name: Scan Podman image üê≥
  #       uses: snyk/actions/docker@master
  #       continue-on-error: true
  #       env:
  #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  #       with:
  #         image: quay.io/tinlam/test/java-app:latest

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [scan-security-vulnerabilities]
  #   environment: 
  #     name: ${{ needs.extract-branch-name.outputs.branch_name }}
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v3

  #     - name: Install OpenShift CLI (oc)
  #       run: |
  #         curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz
  #         tar -xvf oc.tar.gz
  #         chmod +x oc
  #         sudo mv oc /usr/local/bin/
  #         oc version

  #     - name: Set up OpenShift CLI
  #       run: |
  #        if [ ${{ needs.extract-branch-name.outputs.branch_name }} == 'PROD' ]; then
  #          oc login --token=sha256~0yZYV21O3vt8tNrg7AODd-Ay1JD-e160EhL6he7eL4I --server=https://api.sandbox-m3.1530.p1.openshiftapps.com:6443
  #        else
  #          oc login --token=sha256~6CmTQIyZ1NMJH4u1ZA2Vxjvf3xUZDBwFh059WY5kcTc --server=https://api.sandbox-m2.ll9k.p1.openshiftapps.com:6443
  #        if
      
  #        oc whoami
         
  #     - name: Apply OpenShift Manifests
  #       run: |
  #         oc apply -f deployment.yaml
  #         oc apply -f service.yaml
  #         oc apply -f route.yaml

